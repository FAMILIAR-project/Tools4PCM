
8 bit (byte)
8 bit (byte)
16 bit (short integer)
16 bit (short integer)
32 bit
32 bit
64 bit (long integer)
64 bit (long integer)
word size
word size
arbitrarily precise (bignum)

signed
unsigned
signed
unsigned
signed
unsigned
signed
unsigned
signed
unsigned
arbitrarily precise (bignum)
ada

or

or

or



or
n/a
algol 68 (variable-width)

n/a

n/a

n/a

n/a

n/a

algol 68 (variable-width)

n/a

n/a

n/a

n/a
&
&

c (c99 fixed-width)










n/a
c++ (c++11 fixed-width)










n/a
c (c99 variable-width)










n/a
c++ (c++11 variable-width)










n/a
objective-c










n/a
c#










(.net 4.0)
java

n/a



n/a

n/a
n/a
n/a

go

or









d








n/a
n/a

common lisp











scheme











islisp











pascal (fpc)










n/a
visual basic
n/a


n/a

n/a
n/a
n/a
n/a
n/a
n/a
visual basic .net








n/a
n/a
(.net 4.0)
python 2.x
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

python 3.x
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

s-lang
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
fortran

n/a

n/a

n/a

n/a



php
n/a
n/a
n/a
n/a

n/a
n/a
n/a
n/a
n/a

perl 5
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

perl 6









n/a
n/a
ruby
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

scala

n/a



n/a

n/a
n/a
n/a

seed7
n/a
n/a
n/a
n/a
n/a
n/a

n/a
n/a
n/a

smalltalk
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a

n/a

windows powershell
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
ocaml
n/a
n/a
n/a
n/a

n/a

n/a



f#




or






standard ml
n/a

n/a
n/a






or
haskell (ghc)
«»
«»
«»
«»
«»
«»
«»
«»

«»

eiffel










n/a
cobol








n/a
n/a
n/a
mathematica
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a
n/a


single precision
double precision
processor dependent
ada


n/a
algol 68


, , etc.
c



objective-c



c++ (stl)



c#


n/a
java


n/a
go


n/a
d



common lisp



scheme



islisp



pascal (free pascal)



visual basic


n/a
visual basic .net


n/a
python
n/a


javascript
n/a

n/a
s-lang



fortran



php



perl



perl 6



ruby
n/a

n/a
scala


n/a
seed7
n/a

n/a
smalltalk


n/a
windows powershell


ocaml
n/a

n/a
f#


n/a
standard ml
n/a

n/a
haskell (ghc)



eiffel



cobol


,
mathematica
n/a
n/a


integer
single precision
double precision
half and quadruple precision etc.
ada
n/a



algol 68
n/a

etc.
etc. & etc.
c (c99)
n/a


n/a
c++ (stl)
n/a


n/a
c#
n/a
n/a
(.net 4.0)
n/a
java
n/a
n/a
n/a
n/a
go
n/a


n/a
d
n/a


n/a
objective-c
n/a
n/a
n/a
n/a
common lisp



n/a
scheme



n/a
pascal
n/a
n/a

n/a
visual basic
n/a
n/a

n/a
visual basic .net
n/a
n/a
(.net 4.0)
n/a
perl




perl 6




python



n/a
javascript
n/a
n/a

n/a
s-lang
n/a
n/a

n/a
fortran



n/a
ruby

n/a

n/a
scala
n/a
n/a
n/a
n/a
seed7
n/a
n/a

n/a
smalltalk



n/a
windows powershell
n/a
n/a

n/a
ocaml
n/a
n/a

n/a
f#


(.net 4.0)
n/a
standard ml
n/a
n/a
n/a
n/a
haskell (ghc)
n/a


n/a
eiffel
n/a
n/a
n/a
n/a
cobol
n/a
n/a
n/a
n/a
mathematica

n/a
n/a


text
text
boolean
enumeration
object/universal

character
string
boolean
enumeration
object/universal
ada



, item, ...)

algol 68



n/a - user defined
n/a
c (c99)

n/a

, item, ... };

c++ (stl)



, item, ... };

objective-c



, item, ... };

c#



, item, ... }

java



, item, ... }

go



= iota item ... )

d



, item, ... }

common lisp





scheme





islisp





pascal (iso)

n/a

, item, ...)
n/a
object pascal (delphi)



, item, ...)

visual basic
n/a


item ... end enum

visual basic .net



item ... end enum

python
n/a




javascript
n/a




s-lang





fortran





php
n/a




perl
n/a




perl 6



item ...> or enum name <<:item(value) :item(value) ...>>

ruby
n/a




scala



, item, ... = value}

seed7



, item, ... end enum;

windows powershell





ocaml



n/a
n/a
f#



= value item = value ...

standard ml



n/a
n/a
haskell (ghc)



n/a
n/a
eiffel



n/a

cobol



n/a

mathematica
n/a



n/a

fixed size array
fixed size array
dynamic size array
dynamic size array

one-dimensional array
multi-dimensional array
one-dimensional array
multi-dimensional array
ada
or array (
> .. <last>, <first> .. <last>, ...) of >, <discrete_type>, ...) of

> range <>, <discrete_type> range <>, ...) of
algol 68
or simply:
:last, first:last]«modename» or :last][first:last]«modename» etc.
or simply:
:last, first:last]«modename» or :last]flex[first:last]«modename» etc.
c (c99)

][size]
or within a block:

c++ (stl)
(c++11)



c#




java




d

][size]


go

][size]...type



objective-c




javascript
n/a
n/a


common lisp




scheme




islisp




pascal

..last] of array[first..last] ... of type or ..last, first..last, ...] of type
n/a
n/a
object pascal (delphi)

..last] of array[first..last] ... of type or ..last, first..last, ...] of type


visual basic




visual basic .net




python




s-lang




fortran

, size,...)


php




perl




perl 6




ruby




scala




seed7




smalltalk




windows powershell




ocaml




f#




standard ml




haskell (ghc)




cobol


n/a

simple composite types
simple composite types
algebraic data type
unions

records
tuple expression
algebraic data type
unions
ada
: type; : type;... end record null record]
n/a
any combination of records, unions and enumerations (as well as references to those, enabling recursive types).
: type; : type;
algol 68

required types and operators can be user defined
required types and operators can be user defined

c (c99)

n/a
n/a

objective-c

n/a
n/a

c++

..type>
n/a

c#



n/a
java
n/a


n/a
javascript

n/a

n/a
d




go
}



common lisp

val)


scheme
n/a
val)


islisp

val)


pascal
end
n/a
n/a
end
visual basic




visual basic .net
end structure



python
n/a
, val, val, ... «)»

n/a
s-lang




fortran
type name end type



php
n/a



perl
n/a


n/a
perl 6
n/a


n/a
ruby



n/a
scala

, val, val, ... )
or or combination of case classes and case objects

windows powershell




ocaml

, val, val, ... «)»

n/a
f#

, val, val, ... «)»

n/a
standard ml

, val, val, ... )

n/a
haskell

, val, val, ... )

n/a
cobol

n/a
n/a


variable
constant
type synonym
ada



algol 68



c (c99)



objective-c



c++



c#



d



java


n/a
javascript


n/a
go



common lisp



scheme



islisp


n/a




visual basic



visual basic .net



python

n/a

coffeescript

n/a
n/a
s-lang



fortran
type name


php


n/a
perl


n/a
perl 6



ruby



scala



windows powershell

n/a
n/a
bash shell

n/a
n/a
ocaml



f#



standard ml



haskell



forth



cobol



n/a
n/a

if
else if
select case
conditional expression
ada
«else end if
then elsif condition then ... «else end if
statements => statements...end case
then «elsif condition then » ... else ) (case expression is expression => expression ... » )
seed7
«else end if
then elsif condition then ... «else end if


modula-2
«else end
then elsif condition then ... «else end


algol 68 & "brief form"




algol 68 & "brief form"




c (c99)


}

objective-c


}

c++ (stl)


}

d


}

java


}

javascript


}

php


}

c#


}

windows powershell




go

}
}

perl


}

perl 6


}

ruby
«else
elsif condition ... «else end
... «elseend

scala


}

smalltalk
«iffalse: end



common lisp
or (unless condition or (if condition



scheme




islisp




pascal
end «else beginend»
end else if condition then begin end ... «else begin end»
end
visual basic
«else end if
elseif condition then ... «else end if
... «case else end select

visual basic .net
«else end if
elseif condition then ... «else end if
... «case else end select

python
instructions «else: instructions»
instructions elif condition : instructions ... «else: instructions»


s-lang




fortran
else endif
elseif (condition) then ... else endif
... case default end select

forth




ocaml




f#
instructions «else instructions»
instructions elif condition then instructions ... «else instructions»


standard ml




haskell (ghc)
or or

}

bash shell
expression «else expression»fi
expression elif condition-command; thenexpression «else expression»fi
command...;;"$condition2" )command...;;esac

coffeescript



all conditions are expressions
coffeescript
«else
else if condition «else

all conditions are expressions
coffeescript

else unless condition «else
«else
all conditions are expressions
coffeescript
«else
else unless condition «else
«else
all conditions are expressions
coffeescript

else unless condition «else
«else
all conditions are expressions
cobol
«else

end-evaluate


if
else if
select case
conditional expression

while
do while
for i = first to last
foreach
ada
end loop
end loop
end loop
end loop (for [all some] [in of] [first .. last discrete_type iterator] => predicate)
algol 68




algol 68
    do statements od
    do statements od


c (c99)



n/a
objective-c




c++ (stl)



(c++11)
c#




java




javascript



(js 1.6+, deprecated) or (ecmascript 6 proposal, supported in firefox)
php




windows powershell




d




go




perl




perl 6




ruby
end or until notcondition end
end while condition or begin end until notcondition
end or first.upto(last-1) { instructions }
end or set.each { item instructions }
bash shell
done or until notcondition ;do done
n/a
done
done
scala




smalltalk




common lisp
or (do () (notcondition)

or (dotimes (i n) or (do ((i first (1+ i))) (( i last))
or (dolist (item set) or (mapc function list) or (map type function sequence)
scheme




islisp




pascal
end
until notcondition;
end;

visual basic
loop or do until notcondition loop
loop while condition or do loop until notcondition
next i
next item
visual basic .net
loop or do until notcondition loop
loop while condition or do loop until notcondition
next i
next item
python
instructions «else: instructions»
n/a
instructions «else: instructions»(python 3.x) instructions «else: instructions»(python 2.x)
instructions «else: instructions»
s-lang




fortran
enddo
enddo
enddo
n/a
forth



n/a
ocaml

n/a


f#
instructions
n/a
instructions
instructions or seq.iter (fun item -> instructions) set
standard ml

n/a
n/a

haskell (ghc)
n/a
n/a


eiffel
until loop end
until loop end
until loop end
until loop end
coffeescript

n/a


coffeescript

n/a


coffeescript

n/a


coffeescript

n/a


coffeescript

n/a


coffeescript

n/a


cobol



n/a
cobol
end-perform
end-perform
end-perform
n/a

throw
handler
assertion
ada

exception statements; statements;... end
any_type with type_invariant boolean_expression
c (c99)



c++



c#



java



javascript


?
d



php



s-lang


?
windows powershell



objective-c



perl


?
perl 6


?
ruby

rescue exception ... «else «ensure end

smalltalk



common lisp

or (handler-bind...)
or (check-type var type)
scheme (rrs)


?
islisp


?
pascal


?
visual basic

.catch: on error goto 0: select case .number end select: end with

visual basic .net

catch «exception» «when condition» ... «finally end try

python

instructions except «exception»: instructions ... «else: instructions» «finally: instructions»

fortran
n/a
n/a
n/a
forth


n/a
ocaml



f#



standard ml



haskell (ghc)



cobol


n/a

exit block(break)
continue
label
branch (goto)
return value from generator
ada

n/a


n/a
algol 68
...

...

(callback)
c (c99)




n/a
objective-c




n/a
c++ (stl)




n/a
d




n/a
c#





java



n/a

javascript



n/a

php





perl





perl 6





go





bash shell


n/a
n/a
n/a
common lisp


...)


scheme





islisp


...)


pascal(iso)
n/a
n/a


n/a
pascal(fpc)




n/a
visual basic

n/a


n/a
visual basic .net




n/a
python


n/a
n/a

rpg iv





s-lang





fortran




n/a
ruby





windows powershell





ocaml
n/a
n/a
n/a
n/a

f#
n/a
n/a
n/a
n/a

standard ml
n/a
n/a
n/a
n/a

haskell (ghc)
n/a
n/a
n/a
n/a

cobol


n/a
ya


n/a

calling a function
basic/void function
value-returning function
required main function
ada



n/a
algol 68



n/a
c (c99)



}
objective-c



}
c++ (stl)



}
c#




java




d




javascript



n/a
go




common lisp

or (setf (symbol-function symbol)

n/a
scheme



n/a
islisp



n/a
pascal

«label«const«type«var«local function declarations» beginend;
«label«const«type«var«local function declarations» begin end;
«const«type«var«function declarations» begin end.
visual basic

end sub
end function
end sub
visual basic .net

end sub
end function
end sub or function main(«byval cmdargs() as string») as integer end function
python

instructions
instructions return value
n/a
s-lang




fortran

end subroutine
end function
end program
forth

;
;
n/a
php



n/a
perl



n/a
perl 6



n/a
ruby

end
end
n/a
scala




windows powershell



n/a
bash shell

instructions}orinstructions }
instructionsreturn «exit_code»}orinstructionsreturn «exit_code» }
n/a
bash shell



n/a
ocaml



n/a
f#




standard ml




haskell

instructions
instructions return value

eiffel

do ensure end
do ensure end

coffeescript



n/a
coffeescript



n/a
cobol
«end-call»


n/a
cobol

n/a

n/a

string to integer
string to long integer
string to floating point
integer to string
floating point to string
ada





algol 68 with general, and then specific formats
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
with prior declarations and association of:
algol 68 with general, and then specific formats





algol 68 with general, and then specific formats
orv
or
or
or
or etc.
c (c99)





objective-c





c++ (stl)





c++11





c#





d





java











go





common lisp





scheme





islisp





pascal





visual basic




visual basic .net



python





s-lang





fortran





php





perl





perl 6





ruby





scala





windows powershell





ocaml





f#





standard ml





haskell (ghc)





cobol
to number
to number
to number



read from
write to
write to

stdin
stdout
stderr
ada



algol 68



c (c99)



objective-c



c++



c#



d



java



go



javascript web browser implementation



javascript active server pages



javascript windows script host



common lisp



scheme (rrs)



islisp



pascal


n/a
visual basic


n/a
visual basic .net



python 2.x



python 3.x



s-lang



fortran



forth


n/a
php



perl



perl 6



ruby



windows powershell



ocaml



f#



standard ml



haskell (ghc)



cobol




argument values
argument counts
program name / script name
ada



c (c99)


first argument
objective-c


first argument
c++


first argument
c#



java



d


first argument
javascript windows script host implementation



go


first argument
common lisp
?
?
?
scheme (rrs)


first argument
islisp
n/a
n/a
n/a
pascal


first argument
visual basic

n/a

visual basic .net



python


first argument
s-lang


first argument
fortran
enddo


php


first argument
bash shell



perl



perl 6



ruby



windows powershell



ocaml


first argument
f#



standard ml



haskell (ghc)

}

cobol


n/a

shell command
execute program
replace current program with new executed program
ada
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
not part of the language standard. commonly done by compiler provided packages or by interfacing to c or posix.
c



c++



objective-c



c#



f#



go



visual basic



visual basic .net



d



java



javascript windows script host implementation



common lisp



scheme



islisp
n/a
n/a
n/a
pascal



ocaml



standard ml



haskell (ghc)



perl



ruby



php



python



s-lang



fortran



windows powershell



bash shell
or


